{"difficulty": "easy", "function_schema_json": {"functions": [{"name": "get_tweets", "parameters": {"hashtag": {"type": "string"}, "num_tweets": {"type": "integer"}}, "docstring": "Get the latest tweets with a given hashtag.\n\nArgs:\n    hashtag (str): The hashtag to search for.\n    num_tweets (int): The number of tweets to return.\n\nReturns:\n    list[str]: A list of tweets."}, {"name": "get_fighter_record", "parameters": {"fighter": {"type": "string"}}, "docstring": "Get the stats for a given fighter, namely wins, losses and draws.\n\nArgs:\n    fighter (str): The name of the fighter.\n\nReturns:\n    dict: A dictionary containing the fighter's stats."}, {"name": "get_sentiment", "parameters": {"text": {"type": "string"}}, "docstring": "Get the sentiment of a given text.\n\nArgs:\n    text (str): The text to analyze.\n\nReturns:\n    float: The sentiment score, between 0 and 1."}]}, "function_schema_python": "def get_tweets(hashtag: str, num_tweets: int) -> list[str]:\n    \"\"\"Get the latest tweets with a given hashtag.\n\n    Args:\n        hashtag (str): The hashtag to search for.\n        num_tweets (int): The number of tweets to return.\n\n    Returns:\n        list[str]: A list of tweets.\n    \"\"\"\n    pass\n\ndef get_fighter_record(fighter: str) -> dict:\n    \"\"\"Get the stats for a given fighter, namely wins, losses and draws.\n\n    Args:\n        fighter (str): The name of the fighter.\n\n    Returns:\n        dict: A dictionary containing the fighter's stats.\n    \"\"\"\n    pass\n\ndef get_sentiment(text: str) -> float:\n    \"\"\"Get the sentiment of a given text.\n\n    Args:\n        text (str): The text to analyze.\n\n    Returns:\n        float: The sentiment score, between 0 and 1.\n    \"\"\"\n    pass", "mock_functions": "def get_tweets(hashtag: str, num_tweets: int) -> list[str]:\n    \"\"\"Get the latest tweets with a given hashtag.\n\n    Args:\n        hashtag (str): The hashtag to search for.\n        num_tweets (int): The number of tweets to return.\n\n    Returns:\n        list[str]: A list of tweets.\n    \"\"\"\n    return [\"good tweet\"] * num_tweets\n\ndef get_fighter_record(fighter: str) -> dict:\n    \"\"\"Get the stats for a given fighter, namely wins, losses and draws.\n\n    Args:\n        fighter (str): The name of the fighter.\n\n    Returns:\n        dict: A dictionary containing the fighter's stats.\n    \"\"\"\n    return {\"name\": fighter, \"wins\": 17, \"losses\": 1, \"draws\": 0}\n\ndef get_sentiment(text: str) -> float:\n    \"\"\"Get the sentiment of a given text.\n\n    Args:\n        text (str): The text to analyze.\n\n    Returns:\n        float: The sentiment score, between 0 and 1.\n    \"\"\"\n    return 0.8", "completion": "tweets = get_tweets(\"#IslamMakhachev\", 10)\nsentiment_scores = [get_sentiment(tweet) for tweet in tweets]\naverage_sentiment = sum(sentiment_scores) / len(sentiment_scores) if sentiment_scores else 0\nfighter_record = get_fighter_record(\"Islam Makhachev\")", "user_query": "What is the current sentiment about Islam Makhachev and his current record?", "checklist": {"functions": ["get_tweets", "get_fighter_record", "get_sentiment"], "values": [0.7999999999999999, {"name": "Islam Makhachev", "wins": 17, "losses": 1, "draws": 0}]}}
