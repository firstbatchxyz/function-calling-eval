{"difficulty": "easy", "function_schema_python": "def check_calendar_availability(start_date: str, end_date: str) -> dict:\n    \"\"\"Checks calendar availability for a given date range.\n\n    :param start_date: Start date in 'YYYY-MM-DD' format\n    :param end_date: End date in 'YYYY-MM-DD' format\n    :return: Dictionary containing availability status and conflicting events\n    :raises ValueError: If dates are invalid or in wrong format\"\"\"\n    pass\ndef get_conflicting_appointments(start_date: str, end_date: str) -> list:\n    \"\"\"Retrieves all appointments within a date range that need rescheduling.\n\n    :param start_date: Start date in 'YYYY-MM-DD' format\n    :param end_date: End date in 'YYYY-MM-DD' format\n    :return: List of appointment dictionaries\n    :raises ValueError: If dates are invalid\"\"\"\n    pass\ndef reschedule_appointment(appointment_id: str, new_date: str, new_time: str) -> bool:\n    \"\"\"Reschedules an existing appointment to a new date and time.\n\n    :param appointment_id: Unique identifier for the appointment\n    :param new_date: New date in 'YYYY-MM-DD' format\n    :param new_time: New time in 'HH:MM' format\n    :return: True if rescheduling successful, False otherwise\n    :raises ValueError: If appointment_id is invalid or date/time format incorrect\"\"\"\n    pass\n", "function_schema_json": [{"name": "check_calendar_availability", "description": "Checks calendar availability for a given date range.", "parameters": {"type": "object", "properties": {"start_date": {"type": "string", "description": "Start date in 'YYYY-MM-DD' format"}, "end_date": {"type": "string", "description": "End date in 'YYYY-MM-DD' format"}}, "required": ["start_date", "end_date"], "additionalProperties": false}}, {"name": "get_conflicting_appointments", "description": "Retrieves all appointments within a date range that need rescheduling.", "parameters": {"type": "object", "properties": {"start_date": {"type": "string", "description": "Start date in 'YYYY-MM-DD' format"}, "end_date": {"type": "string", "description": "End date in 'YYYY-MM-DD' format"}}, "required": ["start_date", "end_date"], "additionalProperties": false}}, {"name": "reschedule_appointment", "description": "Reschedules an existing appointment to a new date and time.", "parameters": {"type": "object", "properties": {"appointment_id": {"type": "string", "description": "Unique identifier for the appointment"}, "new_date": {"type": "string", "description": "New date in 'YYYY-MM-DD' format"}, "new_time": {"type": "string", "description": "New time in 'HH:MM' format"}}, "required": ["appointment_id", "new_date", "new_time"], "additionalProperties": false}}], "mock_functions": "def check_calendar_availability(start_date: str, end_date: str) -> dict:\n    \"\"\"\n    Checks calendar availability for a given date range.\n    \n    :param start_date: Start date in 'YYYY-MM-DD' format\n    :param end_date: End date in 'YYYY-MM-DD' format\n    :return: Dictionary containing availability status and conflicting events\n    :raises ValueError: If dates are invalid or in wrong format\n    \"\"\"\n    if not all(date.count('-') == 2 for date in [start_date, end_date]):\n        raise ValueError(\"Dates must be in YYYY-MM-DD format\")\n        \n    if start_date == \"2023-10-14\" and end_date == \"2023-10-14\":\n        return {\n            \"is_available\": True,\n            \"conflicts\": []\n        }\n    return {\n        \"is_available\": False,\n        \"conflicts\": [\"Meeting with Marketing Team at 2 PM\"]\n    }\ndef get_conflicting_appointments(start_date: str, end_date: str) -> list:\n    \"\"\"\n    Retrieves all appointments within a date range that need rescheduling.\n    \n    :param start_date: Start date in 'YYYY-MM-DD' format\n    :param end_date: End date in 'YYYY-MM-DD' format\n    :return: List of appointment dictionaries\n    :raises ValueError: If dates are invalid\n    \"\"\"\n    if start_date == \"2023-10-15\" and end_date == \"2023-10-20\":\n        return [\n            {\n                \"date\": \"2023-10-16\",\n                \"time\": \"14:00\",\n                \"title\": \"Client Call with ABC Corp\",\n                \"duration\": 60\n            },\n            {\n                \"date\": \"2023-10-18\",\n                \"time\": \"10:00\",\n                \"title\": \"Weekly Team Sync\",\n                \"duration\": 30\n            }\n        ]\n    return []\ndef reschedule_appointment(appointment_id: str, new_date: str, new_time: str) -> bool:\n    \"\"\"\n    Reschedules an existing appointment to a new date and time.\n    \n    :param appointment_id: Unique identifier for the appointment\n    :param new_date: New date in 'YYYY-MM-DD' format\n    :param new_time: New time in 'HH:MM' format\n    :return: True if rescheduling successful, False otherwise\n    :raises ValueError: If appointment_id is invalid or date/time format incorrect\n    \"\"\"\n    if not appointment_id or not new_date or not new_time:\n        raise ValueError(\"All parameters must be provided\")\n    \n    valid_appointments = [\"ABC001\", \"TEAM002\"]\n    if appointment_id in valid_appointments:\n        return True\n    return False", "user_query": "Can you check Jenny's calendar availability for a team meeting on October 14th, 2023?", "checklist": {"functions": ["check_calendar_availability"], "values": [{"is_available": true, "conflicts": []}]}}
{"difficulty": "easy", "function_schema_python": "def check_calendar_availability(start_date: str, end_date: str) -> dict:\n    \"\"\"Checks calendar availability for a given date range.\n\n    :param start_date: Start date in 'YYYY-MM-DD' format\n    :param end_date: End date in 'YYYY-MM-DD' format\n    :return: Dictionary containing availability status and conflicting events\n    :raises ValueError: If dates are invalid or in wrong format\"\"\"\n    pass\ndef get_conflicting_appointments(start_date: str, end_date: str) -> list:\n    \"\"\"Retrieves all appointments within a date range that need rescheduling.\n\n    :param start_date: Start date in 'YYYY-MM-DD' format\n    :param end_date: End date in 'YYYY-MM-DD' format\n    :return: List of appointment dictionaries\n    :raises ValueError: If dates are invalid\"\"\"\n    pass\ndef reschedule_appointment(appointment_id: str, new_date: str, new_time: str) -> bool:\n    \"\"\"Reschedules an existing appointment to a new date and time.\n\n    :param appointment_id: Unique identifier for the appointment\n    :param new_date: New date in 'YYYY-MM-DD' format\n    :param new_time: New time in 'HH:MM' format\n    :return: True if rescheduling successful, False otherwise\n    :raises ValueError: If appointment_id is invalid or date/time format incorrect\"\"\"\n    pass\n", "function_schema_json": [{"name": "check_calendar_availability", "description": "Checks calendar availability for a given date range.", "parameters": {"type": "object", "properties": {"start_date": {"type": "string", "description": "Start date in 'YYYY-MM-DD' format"}, "end_date": {"type": "string", "description": "End date in 'YYYY-MM-DD' format"}}, "required": ["start_date", "end_date"], "additionalProperties": false}}, {"name": "get_conflicting_appointments", "description": "Retrieves all appointments within a date range that need rescheduling.", "parameters": {"type": "object", "properties": {"start_date": {"type": "string", "description": "Start date in 'YYYY-MM-DD' format"}, "end_date": {"type": "string", "description": "End date in 'YYYY-MM-DD' format"}}, "required": ["start_date", "end_date"], "additionalProperties": false}}, {"name": "reschedule_appointment", "description": "Reschedules an existing appointment to a new date and time.", "parameters": {"type": "object", "properties": {"appointment_id": {"type": "string", "description": "Unique identifier for the appointment"}, "new_date": {"type": "string", "description": "New date in 'YYYY-MM-DD' format"}, "new_time": {"type": "string", "description": "New time in 'HH:MM' format"}}, "required": ["appointment_id", "new_date", "new_time"], "additionalProperties": false}}], "mock_functions": "def check_calendar_availability(start_date: str, end_date: str) -> dict:\n    \"\"\"\n    Checks calendar availability for a given date range.\n    \n    :param start_date: Start date in 'YYYY-MM-DD' format\n    :param end_date: End date in 'YYYY-MM-DD' format\n    :return: Dictionary containing availability status and conflicting events\n    :raises ValueError: If dates are invalid or in wrong format\n    \"\"\"\n    if not all(date.count('-') == 2 for date in [start_date, end_date]):\n        raise ValueError(\"Dates must be in YYYY-MM-DD format\")\n        \n    if start_date == \"2023-10-14\" and end_date == \"2023-10-14\":\n        return {\n            \"is_available\": True,\n            \"conflicts\": []\n        }\n    return {\n        \"is_available\": False,\n        \"conflicts\": [\"Meeting with Marketing Team at 2 PM\"]\n    }\ndef get_conflicting_appointments(start_date: str, end_date: str) -> list:\n    \"\"\"\n    Retrieves all appointments within a date range that need rescheduling.\n    \n    :param start_date: Start date in 'YYYY-MM-DD' format\n    :param end_date: End date in 'YYYY-MM-DD' format\n    :return: List of appointment dictionaries\n    :raises ValueError: If dates are invalid\n    \"\"\"\n    if start_date == \"2023-10-15\" and end_date == \"2023-10-20\":\n        return [\n            {\n                \"date\": \"2023-10-16\",\n                \"time\": \"14:00\",\n                \"title\": \"Client Call with ABC Corp\",\n                \"duration\": 60\n            },\n            {\n                \"date\": \"2023-10-18\",\n                \"time\": \"10:00\",\n                \"title\": \"Weekly Team Sync\",\n                \"duration\": 30\n            }\n        ]\n    return []\ndef reschedule_appointment(appointment_id: str, new_date: str, new_time: str) -> bool:\n    \"\"\"\n    Reschedules an existing appointment to a new date and time.\n    \n    :param appointment_id: Unique identifier for the appointment\n    :param new_date: New date in 'YYYY-MM-DD' format\n    :param new_time: New time in 'HH:MM' format\n    :return: True if rescheduling successful, False otherwise\n    :raises ValueError: If appointment_id is invalid or date/time format incorrect\n    \"\"\"\n    if not appointment_id or not new_date or not new_time:\n        raise ValueError(\"All parameters must be provided\")\n    \n    valid_appointments = [\"ABC001\", \"TEAM002\"]\n    if appointment_id in valid_appointments:\n        return True\n    return False", "user_query": "Jenny is traveling from October 15th to October 20th, 2023. Could you find any appointments in that date range that need rescheduling?", "checklist": {"functions": ["get_conflicting_appointments"], "values": [[{"date": "2023-10-16", "time": "14:00", "title": "Client Call with ABC Corp", "duration": 60}, {"date": "2023-10-18", "time": "10:00", "title": "Weekly Team Sync", "duration": 30}]]}}
{"difficulty": "hard", "function_schema_python": "def clear_calendar(appointment_date: str, appointment_time: str) -> bool:\n    \"\"\"Clears the calendar for a given date and time range.\n\n    :param appointment_date: The date of the appointment (e.g., \"Tuesday, September 5th\").\n    :param appointment_time: The time range to clear (e.g., \"afternoon\").\n    :return: True if the calendar was successfully cleared, False otherwise.\n    :raises ValueError: If the date or time range is invalid.\"\"\"\n    pass\ndef reschedule_conflicting_appointments(appointment_date: str, appointment_time: str) -> list:\n    \"\"\"Reschedules appointments that conflict with the given date and time range.\n\n    :param appointment_date: The date of the appointment (e.g., \"Tuesday, September 5th\").\n    :param appointment_time: The time range to check (e.g., \"afternoon\").\n    :return: A list of dictionaries with the following keys:\n        - original_appointment_time (str): The original time of the appointment.\n        - new_appointment_time (str): The newly scheduled time of the appointment.\n    :raises ValueError: If the date or time range is invalid.\"\"\"\n    pass\ndef find_free_slots(appointment_date: str, duration: str) -> list:\n    \"\"\"Finds free slots in the calendar for the specified date and duration.\n\n    :param appointment_date: The date to check (e.g., \"Wednesday, September 6th\").\n    :param duration: The duration of the required free slot (e.g., \"1 hour\").\n    :return: A list of free slot times in format (e.g., [\"9 AM\", \"11 AM\"]).\n    :raises ValueError: If the date or duration is invalid.\"\"\"\n    pass\ndef send_email(recipient: str, subject: str, body: str) -> bool:\n    \"\"\"Sends an email to the specified recipient with the given subject and body.\n\n    :param recipient: The email address of the recipient.\n    :param subject: The subject line of the email.\n    :param body: The body content of the email.\n    :return: True if the email was sent successfully, False otherwise.\n    :raises ValueError: If any parameter is invalid.\"\"\"\n    pass\ndef grab_car_service(location: str, service: str) -> str:\n    \"\"\"Booking a car service using Grab, typically for ridesharing.\n\n    :param location: The pickup location.\n    :param service: The type of service (e.g., \"GrabExclusive\").\n    :return: A string with confirmation of booking.\n    :raises ValueError: If location or service type is invalid.\"\"\"\n    pass\ndef get_google_maps_directions(origin: str, destination: str) -> dict:\n    \"\"\"Retrieves directions from Google Maps.\n\n    :param origin: The starting address.\n    :param destination: The destination address.\n    :return: dict with the following keys:\n        - steps (list[str]): The list of steps in directions.\n        - estimated_time (str): Estimated time in \"1 hour 30 minutes\" format.\n    :raises ValueError: If origin or destination is empty.\"\"\"\n    pass\n", "function_schema_json": [{"name": "clear_calendar", "description": "Clears the calendar for a given date and time range.", "parameters": {"type": "object", "properties": {"appointment_date": {"type": "string", "description": "The date of the appointment (e.g., \"Tuesday, September 5th\")."}, "appointment_time": {"type": "string", "description": "The time range to clear (e.g., \"afternoon\")."}}, "required": ["appointment_date", "appointment_time"], "additionalProperties": false}}, {"name": "reschedule_conflicting_appointments", "description": "Reschedules appointments that conflict with the given date and time range.", "parameters": {"type": "object", "properties": {"appointment_date": {"type": "string", "description": "The date of the appointment (e.g., \"Tuesday, September 5th\")."}, "appointment_time": {"type": "string", "description": "The time range to check (e.g., \"afternoon\")."}}, "required": ["appointment_date", "appointment_time"], "additionalProperties": false}}, {"name": "find_free_slots", "description": "Finds free slots in the calendar for the specified date and duration.", "parameters": {"type": "object", "properties": {"appointment_date": {"type": "string", "description": "The date to check (e.g., \"Wednesday, September 6th\")."}, "duration": {"type": "string", "description": "The duration of the required free slot (e.g., \"1 hour\")."}}, "required": ["appointment_date", "duration"], "additionalProperties": false}}, {"name": "send_email", "description": "Sends an email to the specified recipient with the given subject and body.", "parameters": {"type": "object", "properties": {"recipient": {"type": "string", "description": "The email address of the recipient."}, "subject": {"type": "string", "description": "The subject line of the email."}, "body": {"type": "string", "description": "The body content of the email."}}, "required": ["recipient", "subject", "body"], "additionalProperties": false}}, {"name": "grab_car_service", "description": "Booking a car service using Grab, typically for ridesharing.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The pickup location."}, "service": {"type": "string", "description": "The type of service (e.g., \"GrabExclusive\")."}}, "required": ["location", "service"], "additionalProperties": false}}, {"name": "get_google_maps_directions", "description": "Retrieves directions from Google Maps.", "parameters": {"type": "object", "properties": {"origin": {"type": "string", "description": "The starting address."}, "destination": {"type": "string", "description": "The destination address."}}, "required": ["origin", "destination"], "additionalProperties": false}}], "mock_functions": "def clear_calendar(appointment_date: str, appointment_time: str) -> bool:\n    \"\"\"\n    Clears the calendar for a given date and time range.\n    \n    :param appointment_date: The date of the appointment (e.g., \"Tuesday, September 5th\").\n    :param appointment_time: The time range to clear (e.g., \"afternoon\").\n    :return: True if the calendar was successfully cleared, False otherwise.\n    :raises ValueError: If the date or time range is invalid.\n    \"\"\"\n    if not appointment_date or not appointment_time:\n        raise ValueError(\"Date and time range must be provided.\")\n    if appointment_date.lower() == \"tuesday, september 5th\" and appointment_time.lower() == \"afternoon\":\n        return True\n    return False\ndef reschedule_conflicting_appointments(appointment_date: str, appointment_time: str) -> list:\n    \"\"\"\n    Reschedules appointments that conflict with the given date and time range.\n    \n    :param appointment_date: The date of the appointment (e.g., \"Tuesday, September 5th\").\n    :param appointment_time: The time range to check (e.g., \"afternoon\").\n    :return: A list of dictionaries with the following keys:\n        - original_appointment_time (str): The original time of the appointment.\n        - new_appointment_time (str): The newly scheduled time of the appointment.\n    :raises ValueError: If the date or time range is invalid.\n    \"\"\"\n    if not appointment_date or not appointment_time:\n        raise ValueError(\"Date and time range must be provided.\")\n    if appointment_date.lower() == \"tuesday, september 5th\" and appointment_time.lower() == \"afternoon\":\n        return [\n            {\n                \"original_appointment_time\": \"2 PM\",\n                \"new_appointment_time\": \"3 PM\"\n            }\n        ]\n    return []\ndef find_free_slots(appointment_date: str, duration: str) -> list:\n    \"\"\"\n    Finds free slots in the calendar for the specified date and duration.\n    \n    :param appointment_date: The date to check (e.g., \"Wednesday, September 6th\").\n    :param duration: The duration of the required free slot (e.g., \"1 hour\").\n    :return: A list of free slot times in format (e.g., [\"9 AM\", \"11 AM\"]).\n    :raises ValueError: If the date or duration is invalid.\n    \"\"\"\n    if not appointment_date or not duration:\n        raise ValueError(\"Date and duration must be provided.\")\n    if appointment_date.lower() == \"wednesday, september 6th\" and duration == \"1 hour\":\n        return [\"9 AM\", \"11 AM\"]\n    return []\ndef send_email(recipient: str, subject: str, body: str) -> bool:\n    \"\"\"\n    Sends an email to the specified recipient with the given subject and body.\n    \n    :param recipient: The email address of the recipient.\n    :param subject: The subject line of the email.\n    :param body: The body content of the email.\n    :return: True if the email was sent successfully, False otherwise.\n    :raises ValueError: If any parameter is invalid.\n    \"\"\"\n    if not recipient or not subject or not body:\n        raise ValueError(\"Recipient, subject, and body must be provided.\")\n    if recipient.lower() == \"michael@example.com\" and subject and body:\n        return True\n    return False\ndef grab_car_service(location: str, service: str) -> str:\n    \"\"\"\n    Booking a car service using Grab, typically for ridesharing.\n    \n    :param location: The pickup location.\n    :param service: The type of service (e.g., \"GrabExclusive\").\n    :return: A string with confirmation of booking.\n    :raises ValueError: If location or service type is invalid.\n    \"\"\"\n    if not location or not service:\n        raise ValueError(\"Location and service type must be provided.\")\n    if location == \"Chicago O'Hare Airport\" and service == \"GrabExclusive\":\n        return \"GrabExclusive booking confirmed for Chicago O'Hare Airport\"\n    return \"\"\ndef get_google_maps_directions(origin: str, destination: str) -> dict:\n    \"\"\"\n    Retrieves directions from Google Maps.\n    \n    :param origin: The starting address.\n    :param destination: The destination address.\n    :return: dict with the following keys:\n        - steps (list[str]): The list of steps in directions.\n        - estimated_time (str): Estimated time in \"1 hour 30 minutes\" format.\n    :raises ValueError: If origin or destination is empty.\n    \"\"\"\n    if not origin or not destination:\n        raise ValueError(\"Origin and destination must not be empty.\")\n    if origin == \"Chicago O'Hare Airport\" and destination == \"Michael's Home\":\n        return {\n            \"steps\": [\n                \"Head east on Main St.\",\n                \"Merge onto I-95 North\",\n                \"Exit onto Broadway\",\n                \"Arrive at destination: Michael's Home\"\n            ],\n            \"estimated_time\": \"3 hours\"\n        }\n    return {}", "user_query": "Can you clear my calendar for the afternoon of Tuesday, September 5th and reschedule any conflicting appointments?  Then, let me know what free 1-hour slots I have on Wednesday, September 6th.", "checklist": {"functions": ["clear_calendar", "reschedule_conflicting_appointments", "find_free_slots"], "values": [true, [{"original_appointment_time": "2 PM", "new_appointment_time": "3 PM"}], ["9 AM", "11 AM"]]}}
{"difficulty": "easy", "function_schema_python": "def clear_calendar(appointment_date: str, appointment_time: str) -> bool:\n    \"\"\"Clears the calendar for a given date and time range.\n\n    :param appointment_date: The date of the appointment (e.g., \"Tuesday, September 5th\").\n    :param appointment_time: The time range to clear (e.g., \"afternoon\").\n    :return: True if the calendar was successfully cleared, False otherwise.\n    :raises ValueError: If the date or time range is invalid.\"\"\"\n    pass\ndef reschedule_conflicting_appointments(appointment_date: str, appointment_time: str) -> list:\n    \"\"\"Reschedules appointments that conflict with the given date and time range.\n\n    :param appointment_date: The date of the appointment (e.g., \"Tuesday, September 5th\").\n    :param appointment_time: The time range to check (e.g., \"afternoon\").\n    :return: A list of dictionaries with the following keys:\n        - original_appointment_time (str): The original time of the appointment.\n        - new_appointment_time (str): The newly scheduled time of the appointment.\n    :raises ValueError: If the date or time range is invalid.\"\"\"\n    pass\ndef find_free_slots(appointment_date: str, duration: str) -> list:\n    \"\"\"Finds free slots in the calendar for the specified date and duration.\n\n    :param appointment_date: The date to check (e.g., \"Wednesday, September 6th\").\n    :param duration: The duration of the required free slot (e.g., \"1 hour\").\n    :return: A list of free slot times in format (e.g., [\"9 AM\", \"11 AM\"]).\n    :raises ValueError: If the date or duration is invalid.\"\"\"\n    pass\ndef send_email(recipient: str, subject: str, body: str) -> bool:\n    \"\"\"Sends an email to the specified recipient with the given subject and body.\n\n    :param recipient: The email address of the recipient.\n    :param subject: The subject line of the email.\n    :param body: The body content of the email.\n    :return: True if the email was sent successfully, False otherwise.\n    :raises ValueError: If any parameter is invalid.\"\"\"\n    pass\ndef grab_car_service(location: str, service: str) -> str:\n    \"\"\"Booking a car service using Grab, typically for ridesharing.\n\n    :param location: The pickup location.\n    :param service: The type of service (e.g., \"GrabExclusive\").\n    :return: A string with confirmation of booking.\n    :raises ValueError: If location or service type is invalid.\"\"\"\n    pass\ndef get_google_maps_directions(origin: str, destination: str) -> dict:\n    \"\"\"Retrieves directions from Google Maps.\n\n    :param origin: The starting address.\n    :param destination: The destination address.\n    :return: dict with the following keys:\n        - steps (list[str]): The list of steps in directions.\n        - estimated_time (str): Estimated time in \"1 hour 30 minutes\" format.\n    :raises ValueError: If origin or destination is empty.\"\"\"\n    pass\n", "function_schema_json": [{"name": "clear_calendar", "description": "Clears the calendar for a given date and time range.", "parameters": {"type": "object", "properties": {"appointment_date": {"type": "string", "description": "The date of the appointment (e.g., \"Tuesday, September 5th\")."}, "appointment_time": {"type": "string", "description": "The time range to clear (e.g., \"afternoon\")."}}, "required": ["appointment_date", "appointment_time"], "additionalProperties": false}}, {"name": "reschedule_conflicting_appointments", "description": "Reschedules appointments that conflict with the given date and time range.", "parameters": {"type": "object", "properties": {"appointment_date": {"type": "string", "description": "The date of the appointment (e.g., \"Tuesday, September 5th\")."}, "appointment_time": {"type": "string", "description": "The time range to check (e.g., \"afternoon\")."}}, "required": ["appointment_date", "appointment_time"], "additionalProperties": false}}, {"name": "find_free_slots", "description": "Finds free slots in the calendar for the specified date and duration.", "parameters": {"type": "object", "properties": {"appointment_date": {"type": "string", "description": "The date to check (e.g., \"Wednesday, September 6th\")."}, "duration": {"type": "string", "description": "The duration of the required free slot (e.g., \"1 hour\")."}}, "required": ["appointment_date", "duration"], "additionalProperties": false}}, {"name": "send_email", "description": "Sends an email to the specified recipient with the given subject and body.", "parameters": {"type": "object", "properties": {"recipient": {"type": "string", "description": "The email address of the recipient."}, "subject": {"type": "string", "description": "The subject line of the email."}, "body": {"type": "string", "description": "The body content of the email."}}, "required": ["recipient", "subject", "body"], "additionalProperties": false}}, {"name": "grab_car_service", "description": "Booking a car service using Grab, typically for ridesharing.", "parameters": {"type": "object", "properties": {"location": {"type": "string", "description": "The pickup location."}, "service": {"type": "string", "description": "The type of service (e.g., \"GrabExclusive\")."}}, "required": ["location", "service"], "additionalProperties": false}}, {"name": "get_google_maps_directions", "description": "Retrieves directions from Google Maps.", "parameters": {"type": "object", "properties": {"origin": {"type": "string", "description": "The starting address."}, "destination": {"type": "string", "description": "The destination address."}}, "required": ["origin", "destination"], "additionalProperties": false}}], "mock_functions": "def clear_calendar(appointment_date: str, appointment_time: str) -> bool:\n    \"\"\"\n    Clears the calendar for a given date and time range.\n    \n    :param appointment_date: The date of the appointment (e.g., \"Tuesday, September 5th\").\n    :param appointment_time: The time range to clear (e.g., \"afternoon\").\n    :return: True if the calendar was successfully cleared, False otherwise.\n    :raises ValueError: If the date or time range is invalid.\n    \"\"\"\n    if not appointment_date or not appointment_time:\n        raise ValueError(\"Date and time range must be provided.\")\n    if appointment_date.lower() == \"tuesday, september 5th\" and appointment_time.lower() == \"afternoon\":\n        return True\n    return False\ndef reschedule_conflicting_appointments(appointment_date: str, appointment_time: str) -> list:\n    \"\"\"\n    Reschedules appointments that conflict with the given date and time range.\n    \n    :param appointment_date: The date of the appointment (e.g., \"Tuesday, September 5th\").\n    :param appointment_time: The time range to check (e.g., \"afternoon\").\n    :return: A list of dictionaries with the following keys:\n        - original_appointment_time (str): The original time of the appointment.\n        - new_appointment_time (str): The newly scheduled time of the appointment.\n    :raises ValueError: If the date or time range is invalid.\n    \"\"\"\n    if not appointment_date or not appointment_time:\n        raise ValueError(\"Date and time range must be provided.\")\n    if appointment_date.lower() == \"tuesday, september 5th\" and appointment_time.lower() == \"afternoon\":\n        return [\n            {\n                \"original_appointment_time\": \"2 PM\",\n                \"new_appointment_time\": \"3 PM\"\n            }\n        ]\n    return []\ndef find_free_slots(appointment_date: str, duration: str) -> list:\n    \"\"\"\n    Finds free slots in the calendar for the specified date and duration.\n    \n    :param appointment_date: The date to check (e.g., \"Wednesday, September 6th\").\n    :param duration: The duration of the required free slot (e.g., \"1 hour\").\n    :return: A list of free slot times in format (e.g., [\"9 AM\", \"11 AM\"]).\n    :raises ValueError: If the date or duration is invalid.\n    \"\"\"\n    if not appointment_date or not duration:\n        raise ValueError(\"Date and duration must be provided.\")\n    if appointment_date.lower() == \"wednesday, september 6th\" and duration == \"1 hour\":\n        return [\"9 AM\", \"11 AM\"]\n    return []\ndef send_email(recipient: str, subject: str, body: str) -> bool:\n    \"\"\"\n    Sends an email to the specified recipient with the given subject and body.\n    \n    :param recipient: The email address of the recipient.\n    :param subject: The subject line of the email.\n    :param body: The body content of the email.\n    :return: True if the email was sent successfully, False otherwise.\n    :raises ValueError: If any parameter is invalid.\n    \"\"\"\n    if not recipient or not subject or not body:\n        raise ValueError(\"Recipient, subject, and body must be provided.\")\n    if recipient.lower() == \"michael@example.com\" and subject and body:\n        return True\n    return False\ndef grab_car_service(location: str, service: str) -> str:\n    \"\"\"\n    Booking a car service using Grab, typically for ridesharing.\n    \n    :param location: The pickup location.\n    :param service: The type of service (e.g., \"GrabExclusive\").\n    :return: A string with confirmation of booking.\n    :raises ValueError: If location or service type is invalid.\n    \"\"\"\n    if not location or not service:\n        raise ValueError(\"Location and service type must be provided.\")\n    if location == \"Chicago O'Hare Airport\" and service == \"GrabExclusive\":\n        return \"GrabExclusive booking confirmed for Chicago O'Hare Airport\"\n    return \"\"\ndef get_google_maps_directions(origin: str, destination: str) -> dict:\n    \"\"\"\n    Retrieves directions from Google Maps.\n    \n    :param origin: The starting address.\n    :param destination: The destination address.\n    :return: dict with the following keys:\n        - steps (list[str]): The list of steps in directions.\n        - estimated_time (str): Estimated time in \"1 hour 30 minutes\" format.\n    :raises ValueError: If origin or destination is empty.\n    \"\"\"\n    if not origin or not destination:\n        raise ValueError(\"Origin and destination must not be empty.\")\n    if origin == \"Chicago O'Hare Airport\" and destination == \"Michael's Home\":\n        return {\n            \"steps\": [\n                \"Head east on Main St.\",\n                \"Merge onto I-95 North\",\n                \"Exit onto Broadway\",\n                \"Arrive at destination: Michael's Home\"\n            ],\n            \"estimated_time\": \"3 hours\"\n        }\n    return {}", "user_query": "My sister is arriving in Chicago on Tuesday, September 5th.  Please clear my calendar for the afternoon of that day and reschedule any conflicting appointments.  Also, find me any 1-hour free slots on Wednesday, September 6th for a potential client call.  If you reschedule anything, please send me an email at michael@example.com summarizing the changes.  Finally, assuming my sister is arriving at Chicago O'Hare Airport, book a GrabExclusive car service to pick her up and take her to my home address (please provide directions from the airport to my home).", "checklist": {"functions": ["clear_calendar", "reschedule_conflicting_appointments", "find_free_slots", "send_email", "grab_car_service", "get_google_maps_directions"], "values": [true, [{"original_appointment_time": "2 PM", "new_appointment_time": "3 PM"}], ["9 AM", "11 AM"], true, "GrabExclusive booking confirmed for Chicago O'Hare Airport", {"steps": ["Head east on Main St.", "Merge onto I-95 North", "Exit onto Broadway", "Arrive at destination: Michael's Home"], "estimated_time": "3 hours"}]}}